// colors
//   gray = not implemented
//   orange = experimental
//   green = stable
//   blue = locked

digraph planning {
  // routing, which leads to solid
  // portable ways of getting data around
  // wayfarer-to-server
  hashMatch [style="filled" fontcolor="white" color="blue"]
  methodist [style="filled" fontcolor="white" color="green"]
  wayfarer [style="filled" fontcolor="white" color="green"]
  wayfarerToFs [style="filled" fontcolor="white" color="orange"]
  wayfarerToServer [style="filled" fontcolor="white" color="orange"]
  wayfarerServer [style="filled" fontcolor="white" color="gray"]
  {wayfarer methodist} -> wayfarerToServer
  {wayfarer hashMatch wayfarerToServer} -> wayfarerServer
  {wayfarerServer wayfarerToServer} -> wayfarerToFs

  // composable servers
  // modular components to build http servers
  bodyParserStream [style="filled" fontcolor="white" color="gray"]
  levelWriteStream [style="filled" fontcolor="white" color="gray"]
  boleStream [style="filled" fontcolor="white" color="green"]
  httpNdjson [style="filled" fontcolor="white" color="green"]
  httpResponseStream [style="filled" fontcolor="white" color="gray"]
  serverError [style="filled" fontcolor="white" color="gray"]
  preConfiguredAccountDown [style="filled" fontcolor="white" color="gray"]
  headerStream [style="filled" fontcolor="white" color="gray"] // modified headers, etags
  httpResponseStream -> httpNdjson
  httpNdjson -> boleStream
  {bodyParserStream levelWriteStream headerStream} -> streamingLogic
  serverError -> composableServers
  wayfarerServer -> composableServers
  {wayfarerServer serverError} -> preConfiguredAccountDown
  preConfiguredAccountDown -> composableServers
  boleStream -> streamingLogic -> composableServers

  // testable thoughts
  gherkinStream [style="filled" fontcolor="white" color="green"]
  cukeTap [style="filled" fontcolor="white" color="orange"]
  gherkinStream -> cukeTap

  // instant projects
  autoNpmInstall [style="filled" fontcolor="white" color="gray"]
  polyrepoUpdate [style="filled" fontcolor="white" color="orange"]
  initialize [style="filled" fontcolor="white" color="green"]
  initializeEngine [style="filled" fontcolor="white" color="orange"]
  initializeCli [style="filled" fontcolor="white" color="orange"]
  initializeProject [style="filled" fontcolor="white" color="gray"]
  initializeTest [style="filled" fontcolor="white" color="gray"]
  initializeEngine -> initializeCli
  initializeTest -> initializeCli
  initializeEngine -> initializeProject
  {initializeEngine initializeCli initializeProject} -> initialize
  {initialize autoNpmInstall} -> instantProjects
  polyrepoUpdate -> polyrepo

  // composable clients
  stateAtom [style="filled" fontcolor="white" color="green"]
  stateChannel [style="filled" fontcolor="white" color="gray"]
  virtualHook [style="filled" fontcolor="white" color="orange"]
  virtualValidation [style="filled" fontcolor="white" color="gray"]
  virtualForm [style="filled" fontcolor="white" color="orange"]
  jsonSchemaForm [style="filled" fontcolor="white" color="gray"]
  sheetify [style="filled" fontcolor="white" color="orange"]
  sheetifyNext [style="filled" fontcolor="white" color="gray"]
  inlineVirtualHtml [style="filled" fontcolor="white" color="gray"]
  sheetify -> sheetifyNext
  {sheetify sheetifyNext} -> composableClients
  stateAtom -> stateChannel
  virtualHook -> virtualValidation
  virtualValidation -> composableForms
  inlineVirtualHtml -> composableClients
  {jsonSchemaForm virtualForm} -> composableForms
  {stateAtom stateChannel} -> portableState

  // abstract
  composableApplications [shape="box"]
  composableClients [shape="box"]
  composableForms [shape="box"]
  composableServers [shape="box"]
  instantProjects [shape="box"]
  polyrepo [shape="box"]
  portableBuildProcess [shape="box"]
  portableState [shape="box"]
  streamingLogic [shape="box"]
  {composableForms portableState} -> composableClients
  wayfarerToFs -> portableBuildProcess
  {portableBuildProcess polyrepo} -> instantProjects
  {composableClients composableServers} -> composableApplications
}
